schema {
    query: Query
    mutation: Mutation
}

input OrderByInput {
  zen_unique_id: Sort
  most_recent_zen_version_id: Sort
  most_recent_zen_detail_id: Sort
}

enum Sort {
  asc
  desc
}

type Subreddit {
    zen_subreddit_id: ID!
    reddit_subreddit_id: String
    reddit_unique_id : String
    zen_unique_id: Int
    url: String
    zen_created_at: String
    display_name_prefixed: String
    title: String
    display_name: String
    created: Float
    lang: String
    created_utc: Float
}

type SubredditDetail {
    zen_subreddit_detail_id : ID!
    zen_created_at: String
    zen_detail_id : Int!
    zen_version_id: Int!
    zen_unique_id: Int!
    active_user_count : Int
    accounts_active : Int
    public_traffic : Boolean
    subscribers : Int
    subreddit_type : String
    suggested_comment_sort : String
    allow_polls : Boolean
    collapse_deleted_comments : Boolean
}

type Post {
    zen_post_id: ID!
    reddit_post_id: String
    reddit_account_id: String
    reddit_subreddit_id: String
    reddit_unique_id : String
    zen_unique_id: Int
    most_recent_zen_version_id: Int
    most_recent_zen_detail_id: Int
    title: String
    permalink : String
    author : Account
    subreddit : Subreddit
    versions : [PostDetail]
    zen_created_at : String
    most_recent_detail : PostDetail
}

type PostDetail {
    zen_post_detail_id : ID!
    zen_post_version_id: Int!
    zen_post_id: Int!
    zen_detail_id : Int!
    zen_version_id: Int!
    zen_unique_id: Int!
    zen_created_at : String
    selftext : String
    downs : Int
    ups : Int
    upvote_ratio : Float
}

type Comment {
    zen_comment_id: ID!
    zen_post_id: Int
    zen_subreddit_id: Int
    zen_account_id: Int
    zen_unique_id: ID!
    reddit_comment_id: String
    reddit_unique_id : String
    reddit_parent_id: String
    reddit_post_id: String
    reddit_account_id: String
    reddit_subreddit_id: String
    zen_created_at: String
    created_utc: Float
    depth: String
    permalink: String
    is_submitter: Boolean
    created: Float
    most_recent_zen_comment_detail_id: Int,
    most_recent_zen_comment_version_id: Int,
    most_recent_zen_detail_id: Int,
    most_recent_zen_version_id: Int,
    most_recent_zen_created_at: String,
    most_recent_controversiality: String,
    most_recent_ups: String,
    most_recent_downs: String,
    most_recent_score: String,
    most_recent_body: String,
    most_recent_edited: String,
    most_recent_author_cakeday: Boolean,
    most_recent_author_has_subscribed: Boolean,
    most_recent_author_is_mod: Boolean,
    most_recent_comment_type: String,
    most_recent_author_flair_type: String,
    most_recent_total_awards_received: String,
    most_recent_author_flair_template_id: String,
    most_recent_mod_reason_title: String,
    most_recent_gilded: String,
    most_recent_archived: Boolean,
    most_recent_collapsed_reason_code: String,
    most_recent_no_follow: Boolean,
    most_recent_can_mod_post: Boolean,
    most_recent_send_replies: Boolean,
    most_recent_mod_note: String,
    most_recent_collapsed: Boolean,
    most_recent_top_awarded_type: String,
    most_recent_author_flair_css_class: String,
    most_recent_author_patreon_flair: Boolean,
    most_recent_body_html: String,
    most_recent_removal_reason: String,
    most_recent_collapsed_reason: String,
    most_recent_distinguished: String,
    most_recent_associated_award: String,
    most_recent_stickied: Boolean,
    most_recent_author_premium: Boolean,
    most_recent_can_gild: Boolean,
    most_recent_unrepliable_reason: String,
    most_recent_author_flair_text_color: String,
    most_recent_score_hidden: Boolean,
    most_recent_subreddit_type: String,
    most_recent_locked: Boolean,
    most_recent_report_reasons: String,
    most_recent_author_flair_text: String
}

type CommentDetail {
    zen_comment_detail_id : ID!
    zen_comment_version_id: Int!
    zen_detail_id : Int!
    zen_version_id: Int!
    zen_unique_id: Int!
    zen_created_at : String
    body : String
    downs : Int
    ups : Int
    upvote_ratio : Float
}

type Account {
    zen_account_id: ID!
    zen_created_at: String
    reddit_unique_id : String
    zen_unique_id: Int
    name: String
    reddit_account_id: String
}

type AccountDetail {
    zen_account_detail_id : ID!
    zen_detail_id : Int!
    zen_version_id: Int!
    zen_unique_id: Int!
    zen_created_at : String
    comment_karma : Int
    link_karma : Int
    total_karma : Int
    awardee_karma : Int
    awarder_karma : Int
    listing_use_sort : Boolean
    is_employee : Boolean
    snoovatar_size : String
    verified : Boolean
    is_gold : Boolean
    icon_img : String
    hide_from_robots : Boolean
    pref_show_snoovatar : Boolean
    snoovatar_img : String
    accept_followers : Boolean
}


type PostResult {
    success: Boolean!
    errors: [String]
    post: Post
}

type PostsResult {
    success: Boolean!
    errors: [String]
    posts: [Post]
}

type PostDetailResult {
    success: Boolean!
    errors: [String]
    postdetail: PostDetail
}

type PostDetailsResult {
    success: Boolean!
    errors: [String]
    postdetails: [PostDetail]
}

type CommentResult {
    success: Boolean!
    errors: [String]
    comment: Comment
}

type CommentsResult {
    success: Boolean!
    errors: [String]
    comments: [Comment]
}

type CommentDetailResult {
    success: Boolean!
    errors: [String]
    commentdetail: CommentDetail
}

type CommentDetailsResult {
    success: Boolean!
    errors: [String]
    commentdetails: [CommentDetail]
}

type AccountResult {
    success: Boolean!
    errors: [String]
    account: Account
}

type AccountsResult {
    success: Boolean!
    errors: [String]
    accounts: [Account]
}

type AccountDetailResult {
    success: Boolean!
    errors: [String]
    accountdetail: AccountDetail
}

type AccountDetailsResult {
    success: Boolean!
    errors: [String]
    accountdetails: [AccountDetail]
}

type SubredditResult {
    success: Boolean!
    errors: [String]
    subreddit: Subreddit
}

type SubredditsResult {
    success: Boolean!
    errors: [String]
    subreddits: [Subreddit]
}

type SubredditDetailResult {
    success: Boolean!
    errors: [String]
    subredditdetail: SubredditDetail
}

type SubredditDetailsResult {
    success: Boolean!
    errors: [String]
    subredditdetails: [SubredditDetail]
}

type Query {
    post(byId: ID!): PostResult!
    postdetail(byId: ID!): PostDetailResult!
    postdetails(zen_unique_id: Int, zen_post_id: Int): PostDetailsResult!
    posts(postedBefore: String,
          postedAfter: String,
          updatedBefore: String, 
          updatedAfter: String,
          orderBy: OrderByInput): PostsResult!

    comment(byId: ID!): CommentResult!
    commentdetail(byId: ID!): CommentDetailResult!
    commentdetails(zen_unique_id: Int, zen_comment_id: Int): CommentDetailsResult!
    comments(commentedBefore: String,
          commentedAfter: String,
          updatedBefore: String, 
          updatedAfter: String,
          orderBy: OrderByInput): CommentsResult!

    account(byId: ID!): AccountResult!
    accountdetail(byId: ID!): AccountDetailResult!
    accountdetails(zen_unique_id: Int, zen_account_id: Int): AccountDetailsResult!
    accounts(createdBefore: String,
          createdAfter: String,
          updatedBefore: String, 
          updatedAfter: String,
          orderBy: OrderByInput): AccountsResult!

    subreddit(byId: ID!): SubredditResult!
    subredditdetail(byId: ID!): SubredditDetailResult!
    subredditdetails(zen_unique_id: Int, zen_subreddit_id: Int): SubredditDetailsResult!
    subreddits(createdBefore: String,
          createdAfter: String,
          updatedBefore: String, 
          updatedAfter: String,
          orderBy: OrderByInput): SubredditsResult!
}


type Mutation {
    createComment(from_json: String!): CommentResult!
    createPost(from_json: String!): PostResult!
    createAccount(from_json: String!): AccountResult!
    createSubreddit(from_json: String!): SubredditResult!
}


